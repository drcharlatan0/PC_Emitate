#include <iostream>
#include <string>
#include <clocale>


class OC {
	enum STATE_OC {
		START = 1,
		WAIT,
		WORK,
		SHUTDOWN,
	};
	std::string NAME_CPU;
	float Frequency_Cpu;
	float Ram_frequency;
	int State_now = START;
public:
	OC(std::string name_cp, float Frequency_cp,float Ram_frequency ) {
		this->NAME_CPU = name_cp;
		this->Frequency_Cpu = Frequency_cp;
		this->Ram_frequency = Ram_frequency;
		State_now = WAIT;
	}

	void operator()() {
		while (State_now != SHUTDOWN) {
			std::string command;
			std::cout << "Enter Command:";
			std::cin >> command;
			std::cout << std::endl;
			if (command.empty()) {
				std::cout << "Not command\n";
			}
			if (command.compare("info") == 0) {
				State_now = WORK;
				if (NAME_CPU.empty()) {
					std::cout << "Cpu N/A \n";
				}
				else
				{
					std::cout << "Name CPU: " << NAME_CPU << "\t" << Frequency_Cpu << " GHz" << std::endl;

				}
				std::cout << "RAM Frequency: \t" << Ram_frequency <<std::endl;
				State_now = WAIT;
			}

			if (command.compare("shutdown") == 0) {
				std::cout << "Shutdown System" << std::endl;
				State_now = SHUTDOWN;
			}
		}
	}

};

class Matherboart {
	enum  PCstate {
		ON = 0,
		OFF = 1,
		ACTIVE_COMMAND,
		NOT_ACTIVE_COMMAND,
		BIOS,
		ERROR_CPU,
		ERROR_RAM,
		PREPARE
	};
	int code_cpu;
	std::string name_proccesor;
	int Temperature_Cpu;
	int model_cpu;
	float Frequency_Cpu;
	float Ram_frequency;
	int State_now;
public:
	Matherboart(int code_cpu, int model_cpu) {
		State_now = PREPARE;
		this->code_cpu = code_cpu;
		this->model_cpu = model_cpu;
	}
	int operator()() {
		State_now = PREPARE;
		if (code_cpu == -1) {
			State_now = ERROR_CPU;
		}
		if (code_cpu == 1) {
			name_proccesor = "Athlon";
		}
		else if (code_cpu == 2) {
			name_proccesor = "Phenom";
		}
		if (code_cpu == 1 && model_cpu == 3400) {
			Frequency_Cpu = 2.300;
			Ram_frequency = 1333;
		}
		else if (code_cpu == 1 && model_cpu == 3440) {
			Frequency_Cpu = 2.400;
			Ram_frequency = 1333;
		}
		else if (code_cpu == 1 && model_cpu == 3480) {
			Frequency_Cpu = 2.500;
			Ram_frequency = 1600;
		}
		else if (code_cpu == 2 && model_cpu == 3400) {
			Frequency_Cpu = 2.500;
			Ram_frequency = 1600;
		}
		else if (code_cpu == 2 && model_cpu == 3440) {
			Frequency_Cpu = 2.700;
			Ram_frequency = 1600;
		}
		else if (code_cpu == 2 && model_cpu == 3480) {
			Frequency_Cpu = 3.000;
			Ram_frequency = 1600;
		}
		check();
		if (State_now != ON) {
			return -1;
		}
		else if (State_now == ON) {
			return 0;
		}
		return 404;
	}

	void GET_Temperature_Cpu(int *Temperature) {
		if (State_now == ACTIVE_COMMAND) {
			*Temperature = 15 + std::rand() % 60;
		}
		else if (State_now == NOT_ACTIVE_COMMAND) {
			*Temperature = 15 + std::rand() % 30;
		}
	}
	std::string GET_NAME_CPU() {
		return name_proccesor;
	}
	
	int GET_MODEL_CPU() {
		return model_cpu;
	}

	float GET_Frequency_CPU() {
		return Frequency_Cpu;
	}

	float GET_Frequence_RAM() {
		return Ram_frequency;
	}
	void check() {
		if (Ram_frequency < 0) {
			State_now = ERROR_RAM;
		}
		else if (Ram_frequency > 1700 + std::rand() % 2000) {
			State_now = ERROR_RAM;
		}
		if (Frequency_Cpu < 0 || Frequency_Cpu  > 3.000) {
			State_now = ERROR_CPU;
		}
		if (State_now != ERROR_CPU && State_now != ERROR_RAM) {
			State_now = ON;
		}
	}

	void SET_STATUS(int numb_state) {
		this->State_now = numb_state;
	}

};

void set_data_cpu(int *code_cpu, int *model_cpu) {
	std::string tmp;
	std::cout << "Enter name proccessor:";
	std::cin >> tmp;
	std::cout << std::endl;
	std::cout << "Enter model cpu:";
	std::cin >> *model_cpu;
	std::cout << std::endl;
	if (tmp.empty()) {
		std:: cout << "Error\n Cpu n/a";
		*code_cpu = -1;
	}
	if (tmp.compare("Athlon") == 0) {
		*code_cpu = 1;
	}
	else if (tmp.compare("athlon") == 0) {
		*code_cpu = 1;
	}
	if (tmp.compare("Phenom") == 0) {
		*code_cpu = 2;
	}
	else if (tmp.compare("phenom") == 0) {
		*code_cpu = 2;
	}
}

int main() {
	int code_cpu = 0;
	int model_cpu = 0;
	set_data_cpu(&code_cpu, &model_cpu);
	Matherboart mainboart(code_cpu, model_cpu);
	if (mainboart() == -1) {
		std::cout << "Matherboart not starting";
		return -1;
	}
	OC oc(mainboart.GET_NAME_CPU(),mainboart.GET_Frequency_CPU(),mainboart.GET_Frequence_RAM());
	oc();
	return 0;
}
